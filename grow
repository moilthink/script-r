-- current toggle [5]
local Library = loadstring(game:HttpGetAsync("https://github.com/ActualMasterOogway/Fluent-Renewed/releases/latest/download/Fluent.luau"))()

local Window = Library:CreateWindow{
    Title = `Banana-grow [ DEV ]`,
    SubTitle = "V-0.1.1",
    TabWidth = 160,
    Size = UDim2.fromOffset(830, 525),
    Resize = true, -- Resize this ^ Size according to a 1920x1080 screen, good for mobile users but may look weird on some devices
    MinSize = Vector2.new(470, 380),
    Acrylic = true, -- The blur may be detectable, setting this to false disables blur entirely
    Theme = "Dark",
    MinimizeKey = Enum.KeyCode.LeftControl -- Used when theres no MinimizeKeybind
}

local Tabs = {
    Main = Window:CreateTab{
        Title = "Tab Shop",
        Icon = "nil"
    }
}

local Toggle1 = Tabs.Main:CreateToggle("MyToggle", {Title = "Auto Sell", Default = false})

Toggle1:OnChanged(function()
    if not Toggle1Interacted then
        Toggle1Interacted = true
        return
    end

    AutoSellEnabled = not AutoSellEnabled

    if AutoSellEnabled then
        game:GetService("ReplicatedStorage").GameEvents.Sell_Inventory:FireServer()
    end
end)

-- Store selected seeds
local selectedSeeds = {}

-- Create dropdown
local MultiDropdown = Tabs.Main:CreateDropdown("MultiDropdown", {
    Title = "Seed",
    Description = "",
    Values = {"Carrot", "Strawberry", "Blueberry", "Orange Tulip", "Tomato", "Corn", "Daffodil", "Watermelon", "Pumpkin", "Apple", "Bamboo", "Coconut", "Cactus", "Dragon Fruit", "Mango", "Grape", "Mushroom", "Pepper", "Cacao", "Beanstalk"},
    Multi = true,
    Default = {},
})

-- Update selected seeds when changed
MultiDropdown:OnChanged(function(Value)
    selectedSeeds = {}
    for SeedName, IsSelected in pairs(Value) do
        if IsSelected then
            table.insert(selectedSeeds, SeedName)
        end
    end
end)

local Toggle2 = Tabs.Main:CreateToggle("MyToggle", {Title = "Auto buy", Default = false})

Toggle2:OnChanged(function()
    if not Toggle2Interacted then
        Toggle2Interacted = true
        return
    end

    BuyEnabled = not BuyEnabled

    if BuyEnabled then
        task.spawn(function()
            while BuyEnabled do
                for _, seed in ipairs(selectedSeeds) do
                    local args = {seed}
                    game:GetService("ReplicatedStorage").GameEvents.BuySeedStock:FireServer(unpack(args))
                    task.wait(0.1)
                end
            end
        end)
    end
end)

local selectedGears = {}

-- Create dropdown
local MultiDropdown = Tabs.Main:CreateDropdown("MultiDropdown", {
    Title = "Gear",
    Description = "",
    Values = {"Watering Can", "Trowel", "Recall Wrench", "Basic Sprinkler", "Advanced Sprinkler", "Godly Sprinkler", "Lightning Rod", "Master Sprinkler", "Favorite Tool"},
    Multi = true,
    Default = {},
})

-- Update selected seeds when changed
MultiDropdown:OnChanged(function(Value)
    selectedGears = {}
    for GearName, IsSelected in pairs(Value) do
        if IsSelected then
            table.insert(selectedGears, GearName)
        end
    end
end)

local Toggle3 = Tabs.Main:CreateToggle("MyToggle", {Title = "Auto buy", Default = false})

Toggle3:OnChanged(function()
    if not Toggle3Interacted then
        Toggle3Interacted = true
        return
    end

    BuyGearEnabled = not BuyGearEnabled

    if BuyGearEnabled then
        task.spawn(function()
            while BuyGearEnabled do
                for _, gear in ipairs(selectedGears) do
                    local args = {gear}
                    game:GetService("ReplicatedStorage").GameEvents.BuyGearStock:FireServer(unpack(args))
                    task.wait(0.1)
                end
            end
        end)
    end
end)

local Paragraph = Tabs.Main:CreateParagraph("Paragraph", {
    Title = "Event shop",
    Content = ""
})

local selectedEvents = {}

-- Create dropdown
local MultiDropdown = Tabs.Main:CreateDropdown("MultiDropdown", {
    Title = "Blood moon",
    Description = "",
    Values = {"Mysterious Crate", "Night Egg", "Night Seed Pack", "Blood Banana", "Moon Melon", "Star Caller", "Blood Hedgehog", "Blood Kiwi", "Blood Owl", "Chocolate Carrot", "Red Lollipop", "Candy Sunflower", "Easter Egg", "Chocolate Sprinkler", "Candy Blossom"},
    Multi = true,
    Default = {},
})

-- Update selected seeds when changed
MultiDropdown:OnChanged(function(Value)
    selectedEvents = {}
    for EventName, IsSelected in pairs(Value) do
        if IsSelected then
            table.insert(selectedEvents, EventName)
        end
    end
end)

local Toggle4 = Tabs.Main:CreateToggle("MyToggle", {Title = "Auto buy", Default = false})

Toggle4:OnChanged(function()
    if not Toggle4Interacted then
        Toggle4Interacted = true
        return
    end

    BuyEventEnabled = not BuyEventEnabled

    if BuyEventEnabled then
        task.spawn(function()
            while BuyEventEnabled do
                for _, event in ipairs(selectedEvents) do
                    local args = {event}
                    game:GetService("ReplicatedStorage").GameEvents.BuyEventShopStock:FireServer(unpack(args))
                    task.wait(0.1)
                end
            end
        end)
    end
end)

local selectedCosmeticCrates = {}

-- Create dropdown
local MultiDropdown = Tabs.Main:CreateDropdown("MultiDropdown", {
    Title = "Cosmetic Crate",
    Description = "",
    Values = {"Sign Crate", "Common Gnome Crate", "Fun Crate", "Farmers Gnome Crate", "Classic Gnome Crate", "Statue Crate"},
    Multi = true,
    Default = {},
})

-- Update selected seeds when changed
MultiDropdown:OnChanged(function(Value)
    selectedCosmeticCrates = {}
    for CosmeticCrateName, IsSelected in pairs(Value) do
        if IsSelected then
            table.insert(selectedCosmeticCrates, CosmeticCrateName)
        end
    end
end)

local Toggle5 = Tabs.Main:CreateToggle("MyToggle", {Title = "Auto buy", Default = false})

Toggle5:OnChanged(function()
    if not Toggle5Interacted then
        Toggle5Interacted = true
        return
    end

    BuyCosmeticCrateEnabled = not BuyCosmeticCrateEnabled

    if BuyCosmeticCrateEnabled then
        task.spawn(function()
            while BuyCosmeticCrateEnabled do
                for _, cosmeticCrate in ipairs(selectedEvents) do
                    local args = {cosmeticCrate}
                    game:GetService("ReplicatedStorage").GameEvents.BuyCosmeticCrate:FireServer(unpack(args))
                    task.wait(0.1)
                end
            end
        end)
    end
end)

local selectedCosmeticItems = {}

-- Create dropdown
local MultiDropdown = Tabs.Main:CreateDropdown("MultiDropdown", {
    Title = "Cosmetic Item",
    Description = "",
    Values = {"yeloow shit"}, 
    Multi = true,
    Default = {},
})

-- Update selected seeds when changed
MultiDropdown:OnChanged(function(Value)
    selectedCosmeticItems = {}
    for CosmeticItemName, IsSelected in pairs(Value) do
        if IsSelected then
            table.insert(selectedCosmeticItems, CosmeticItemName)
        end
    end
end)

local Toggle6 = Tabs.Main:CreateToggle("MyToggle", {Title = "Auto buy", Default = false})

Toggle6:OnChanged(function()
    if not Toggle6Interacted then
        Toggle6Interacted = true
        return
    end

    BuyCosmeticItemEnabled = not BuyCosmeticItemEnabled

    if BuyCosmeticItemEnabled then
        task.spawn(function()
            while BuyCosmeticItemEnabled do
                for _, cosmeticCrate in ipairs(selectedEvents) do
                    local args = {cosmeticCrate}
                    game:GetService("ReplicatedStorage").GameEvents.BuyCosmeticItem:FireServer(unpack(args))
                    task.wait(0.1)
                end
            end
        end)
    end
end)

local Toggle7 = Tabs.Main:CreateToggle("MyToggle", {Title = "Auto Sumbit Moonlit-Bloodlit Plant", Default = false})

Toggle7:OnChanged(function()
    if not Toggle7Interacted then
        Toggle7Interacted = true
        return
    end

    AutoSumbitEnabled = not AutoSumbitEnabled

    if AutoSumbitEnabled then
        task.spawn(function()
            while AutoSumbitEnabled do
                local args = {
                    [1] = "SubmitAllPlants"
                }

                game:GetService("ReplicatedStorage").GameEvents.NightQuestRemoteEvent:FireServer(unpack(args))
                task.wait(0.1)
            end
        end)
    end
end)

local Tabs = {
    Main = Window:CreateTab{
        Title = "Tab Info Server and tp",
        Icon = "nil"
    }
}

-- Variables to store input values
local gameid = ""
local jobid = ""

Tabs.Main:CreateButton{
    Title = "Copy gameid",
    Description = "",
    Callback = function()
        local clipboardFunc = setclipboard or toclipboard
        if clipboardFunc then
            clipboardFunc(tostring(game.PlaceId))
            print("Copied Game ID:", game.PlaceId)
        else
            warn("Clipboard not supported on this executor.")
        end
    end
}

Tabs.Main:CreateButton{
    Title = "Copy jobid",
    Description = "",
    Callback = function()
        local clipboardFunc = setclipboard or toclipboard
        if clipboardFunc then
            clipboardFunc(tostring(game.JobId))
            print("Copied Job ID:", game.JobId)
        else
            warn("Clipboard not supported on this executor.")
        end
    end
}

local Input = Tabs.Main:CreateInput("Input", {
    Title = "GameId",
    Default = "",
    Placeholder = "",
    Numeric = false, -- Only allows numbers
    Finished = false,
    Callback = function(Value)
        gameid = Value
        print("Game ID set to:", gameid)
    end
})

local Input = Tabs.Main:CreateInput("Input", {
    Title = "JobId",
    Default = "",
    Placeholder = "",
    Numeric = false, -- Only allows numbers
    Finished = false,
    Callback = function(Value)
        jobid = Value
        print("Job ID set to:", jobid)
    end
})

Tabs.Main:CreateButton{
    Title = "Join Server",
    Description = "",
    Callback = function()
        local TeleportService = game:GetService("TeleportService")
        local placeId = tonumber(gameid)
        local instanceId = tostring(jobid)

        while true do
            if placeId and instanceId ~= "" then
                TeleportService:TeleportToPlaceInstance(placeId, instanceId, game.Players.LocalPlayer)
            else
                warn("Invalid Game ID or Job ID.")
            end
            wait(0.5) -- retry delay
        end
    end
}

Tabs.Main:CreateButton{
    Title = "Seed",
    Description = "",
    Callback = function()
        -- Teleport Script
        local tpPosition = Vector3.new(61.585472106933594, 2.999999761581421, -27.00398063659668)

        local player = game.Players.LocalPlayer
        local character = player.Character or player.CharacterAdded:Wait()
        local humanoidRootPart = character:WaitForChild("HumanoidRootPart")

        -- Teleport
        humanoidRootPart.CFrame = CFrame.new(tpPosition)
    end
}

Tabs.Main:CreateButton{
    Title = "Sell",
    Description = "",
    Callback = function()
        -- Teleport Script
        local tpPosition = Vector3.new(61.58181381225586, 2.999999761581421, 0.4267866313457489)

        local player = game.Players.LocalPlayer
        local character = player.Character or player.CharacterAdded:Wait()
        local humanoidRootPart = character:WaitForChild("HumanoidRootPart")

        -- Teleport
        humanoidRootPart.CFrame = CFrame.new(tpPosition)
    end
}

Tabs.Main:CreateButton{
    Title = "Gear",
    Description = "",
    Callback = function()
        -- Teleport Script
        local tpPosition = Vector3.new(-261.4085693359375, 2.999999761581421, -31.108388900756836)

        local player = game.Players.LocalPlayer
        local character = player.Character or player.CharacterAdded:Wait()
        local humanoidRootPart = character:WaitForChild("HumanoidRootPart")

        -- Teleport
        humanoidRootPart.CFrame = CFrame.new(tpPosition)
    end
}

Tabs.Main:CreateButton{
    Title = "Animal",
    Description = "",
    Callback = function()
        -- Teleport Script
        local tpPosition = Vector3.new(-258.21160888671875, 2.999999761581421, -2.736046314239502)

        local player = game.Players.LocalPlayer
        local character = player.Character or player.CharacterAdded:Wait()
        local humanoidRootPart = character:WaitForChild("HumanoidRootPart")

        -- Teleport
        humanoidRootPart.CFrame = CFrame.new(tpPosition)
    end
}

Tabs.Main:CreateButton{
    Title = "Hungry plant",
    Description = "",
    Callback = function()
        -- Teleport Script
        local tpPosition = Vector3.new(-99.64273071289062, 4.00001335144043, -8.707715034484863)

        local player = game.Players.LocalPlayer
        local character = player.Character or player.CharacterAdded:Wait()
        local humanoidRootPart = character:WaitForChild("HumanoidRootPart")

        -- Teleport
        humanoidRootPart.CFrame = CFrame.new(tpPosition)
    end
}

local screenGui = Instance.new("ScreenGui")
screenGui.ResetOnSpawn = false  -- Prevent the UI from resetting on spawn
screenGui.Parent = game.Players.LocalPlayer:WaitForChild("PlayerGui")

-- Create ImageButton
local imageButton = Instance.new("ImageButton")
imageButton.Parent = screenGui
imageButton.Size = UDim2.new(0, 50, 0, 50)  -- Set size of the button
imageButton.Position = UDim2.new(0, 10, 0, 70)  -- Move the button down 50 pixels
imageButton.Image = "rbxassetid://128243454668365"  -- Set image using the asset ID

-- Set the button's background transparency to 100% (invisible)
imageButton.BackgroundTransparency = 1

-- Create UICorner for rounding the button's corners
local uiCorner = Instance.new("UICorner")
uiCorner.CornerRadius = UDim.new(1, 0)  -- Full circle if the button is square
uiCorner.Parent = imageButton

-- When the button is clicked
imageButton.MouseButton1Click:Connect(function()
    keypress(Enum.KeyCode.LeftControl)
    task.wait(0.1) -- short delay to mimic natural keypress
    keyrelease(Enum.KeyCode.LeftControl)
end)

require(game.ReplicatedStorage.Modules.Notification):CreateNotification("<font color=\"#ADD8E6\"><b>Banana Loaded!</b></font>")
